# User preference
# ───────────────

set-option global autoinfo command|onkey|normal
set-option global autoreload true
set-option global autowrap_column 80
set-option global grepcmd "rg --column --follow"
set-option global tabstop 4
set-option global ui_options ncurses_assistant=none

colorscheme gruvbox-hard-contrast

add-highlighter global/ show-matching
add-highlighter global/ show-whitespaces -spc " "
add-highlighter global/trailing-whitespace regex "\h+$" 0:default,red

# for everything except built-in read-only buffers
hook global WinCreate ^[^*]+$ %{
    add-highlighter window/ number-lines -hlcursor -relative
    lint-enable
}

# Enable editor config
# ────────────────────

hook global BufOpenFile .* %{ editorconfig-load }
hook global BufNewFile .* %{ editorconfig-load }

# Filetype specific hooks
# ───────────────────────

hook global WinSetOption filetype=git-(commit|rebase) %{
    set-option window autowrap_column 72
}

hook global WinSetOption filetype=go %{
    set-option window formatcmd "gofmt -s"
    set-option window lintcmd "golint"
    hook buffer BufWritePre .* %{
        go-format -use-goimports
        lint
    }
}

hook global WinSetOption filetype=markdown %{
    set-option window formatcmd "prettier --parser markdown"
}

hook global WinSetOption filetype=python %{
    set-option window formatcmd "black"
}

hook global WinSetOption filetype=rust %{
    set-option window formatcmd "rustfmt"
    hook buffer BufWritePre .* %{ format }
}

hook global WinSetOption filetype=sh %{
    set-option window formatcmd "shfmt"
    set-option window lintcmd "shellcheck --format=gcc"
    hook buffer BufWritePre .* %{ lint }
}

hook global WinSetOption filetype=yaml %{
    set-option window formatcmd "prettier --parser yaml"
    set-option window lintcmd "yamllint -f parsable"
    hook buffer BufWritePre .* %{ lint }
}

hook global -always BufOpenFifo "\*grep\*" %{ map global normal "'" ":grep-next-match<ret>" }
hook global -always BufOpenFifo "\*lint-output\*" %{ map global normal "'" ":lint-next-error<ret>" }
hook global -always BufOpenFifo "\*make\*" %{ map global normal "'" ":make-next-error<ret>" }

# Various mappings
# ────────────────

map -- global normal - ": explore<ret>"
map global normal "#" ": comment-line<ret>"
map global normal = ": format<ret>"
map global normal <c-g> ":grep "
map global normal <c-p> ": fuzzy-files<ret>"
map global normal + ": lint<ret>"

map global user -docstring "Run the make utility wrapper with no arguments" m ": make<ret>"
map global user -docstring "Format lines to a width of `autowrap_column` characters" q "|par -w $kak_opt_autowrap_column<ret>"

# Helper commands
# ───────────────

define-command explore \
    -params ..1 -file-completion \
    -docstring "explore [<path>]: explore the directory of the current file
    The optional path argument will override the initial location" \
    %{ evaluate-commands %sh{
        if [ $# -ge 1 ] && [ -e $1 ]; then
            path=$1
        elif [ -f $kak_buffile ]; then
            path=$kak_buffile
        else
            path=$PWD
        fi
        printf 'explore- "%s"\n' "$path"
    }
}

define-command -hidden explore- \
    -params ..1 -file-completion \
    %{ evaluate-commands %{
        terminal sh -c "export kak_session=%val(session) kak_client=%val(client); %val{config}/scripts/lf.sh %arg(1)"
    }
}

define-command fuzzy-files \
    -docstring "fuzzy-files: fuzzy find files to select buffers to open" \
    %{ evaluate-commands %{ fuzzy --multi }
}

define-command -hidden fuzzy -params .. \
    %{ evaluate-commands %{
        terminal sh -c "export kak_session='%val(session)' kak_client='%val(client)' FZF_DEFAULT_COMMAND='%val(client_env_FZF_DEFAULT_COMMAND)'; cd '%val{client_env_PWD}' && '%val{config}/scripts/fzf.sh' %arg(@)"
    }
}

define-command new-docs %{
    rename-client main
    set-option global jumpclient main

    new rename-client docs
    set-option global docsclient docs
}

define-command new-tools %{
    rename-client main
    set-option global jumpclient main

    new rename-client tools
    set-option global toolsclient tools
}

# tig blame +%val{cursor_line} %val{buffile}

define-command trim-trailing-whitespace %{
  try %{ execute-keys -draft <a-x> s \h+$ <ret> d }
}

# Third-party plugins
# ───────────────────

# source "%val{config}/plugins/plug.kak/rc/plug.kak"
# plug "andreyorst/plug.kak" noload

# plug "andreyorst/fzf.kak" config %{
#     map -docstring "fzf mode" global normal "<c-p>" ": fzf-mode<ret>"
#     set-option global fzf_preview_width "65%"
#     set-option global fzf_highlighter "bat"
#     # evaluate-commands %sh{
#     #     if [ ! -z "$(command -v fd)" ]; then
#     #         echo "set-option global fzf_file_command 'fd . --no-ignore --type f --follow --hidden'"
#     #     fi
#     # }
# }

# System clipboard handling
# ─────────────────────────

evaluate-commands %sh{
    case $(uname) in
        Linux) copy="xclip -i"; paste="xclip -o" ;;
        Darwin) copy="pbcopy"; paste="pbpaste" ;;
    esac

    printf "map global user -docstring 'Paste (after) from system clipboard' p '!%s<ret>'\n" "$paste"
    printf "map global user -docstring 'Paste (before) from system clipboard' P '<a-!>%s<ret>'\n" "$paste"
    printf "map global user -docstring 'Yank to system clipboard' y '<a-|>%s<ret>: echo -markup %%{{Information}copied selection to system clipboard}<ret>'\n" "$copy"
    printf "map global user -docstring 'Replace from system clipboard' R '|%s<ret>'\n" "$paste"
}

# Load local Kakoune config file if it exists
# ───────────────────────────────────────────
evaluate-commands %sh{
    [ -f $kak_config/kakrc.local ] && echo "source $kak_config/kakrc.local"
}
